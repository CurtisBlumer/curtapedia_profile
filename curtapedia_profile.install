<?php
/**
 * Install, update, and uninstall functions for the Curtapedia installation profile
 * 
 * @author cblumer88
 * @copyright 2014 Curtis Blumer
 * @license http://www.gnu.org/licenses/gpl-3.0.html
 * @version 1.0
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 * 
 * @uses hook_install()
 * 
 * @return void
 */
function curtapedia_profile_install() {
  module_load_include('inc', 'curtapedia._profile', 'includes/curtapedia._profile.permissions');
  $themes = array(
    'theme_default' => 'responsive_bartik',
    'admin_theme' => 'seven',
    'maintenance_theme' => 'responsive_bartik',
  );
  theme_enable($themes);

  // Use theme keys to set system variables
  foreach ($themes as $system_variable => $enabled_theme) {
    if (is_string($system_variable)) {
      variable_set($system_variable, $enabled_theme);
    }
  }

  // Disable the Drupal 7 default theme, Bartik.
  theme_disable(array('bartik'));

  // Update the menu router information.
  $menu_links = _curtapedia_profile_menu_links_define();
  _curtapedia_profile_menu_links_save($menu_links);

  // Create default Node types
  $node_types = _curtapedia_profile_node_types_define();
  _curtapedia_profile_node_types_save($node_types);
  
  // Create RDF mappings for Node types
  $rdf_mappings = _curtapedia_profile_node_types_rdf_mapping_define();
  _curtapedia_profile_node_types_rdf_mapping_save($rdf_mappings);
}

/**
 * Pre-defined Drupal 7 text formats
 * 
 * @return array $text_formats Pre-defined Drupal 7 text formats
 */
function _curtapedia_profile_text_formats_define() {
  $text_formats['default'] = array(
    'format' => 'html_default',
    'name' => 'Default HTML',
    'weight' => -50,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $text_formats['extended'] = array(
    'format' => 'html_extended',
    'name' => 'Extended HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  return $text_formats;
}

/**
 * Saves default text formats to database.
 * 
 * Saves default text formats defined in _curtapedia_profile_text_formats_define
 * to the database.
 * 
 * @param array $text_formats Default text formats.
 * 
 * @return void
 */
function _curtapedia_profile_text_formats_save(array $text_formats) {
  foreach($text_formats as $text_format) {
    //$text_format = (object) $text_format;
    filter_format_save($text_format);
  }
}

/**
 * Defnes default menu links
 * 
 * @return array $menu_links
 */
function _curtapedia_profile_menu_links_define() {
  $menu_links = array(
    // Create a Home link in the main menu.
    array(
      'link_title' => st('Home'),
      'link_path' => '<front>',
      'menu_name' => 'main-menu',
    ),
  );
  return $menu_links;
}

/**
 * Saves default menu links to database.
 * 
 * @uses _curtapedia_profile_text_formats_define()
 * 
 * @param array $menu_links
 * 
 * @return void
 */
function _curtapedia_profile_menu_links_save(array $menu_links) {
  foreach($menu_links as $menu_link) {
    menu_link_save($menu_link);
  }
  menu_rebuild();
}

/**
 * Define default node types
 * 
 * Insert default pre-defined node types into the database. For a complete list
 * of available node type attributes, refer to the node type API documentation
 * at: http://api.drupal.org/api/HEAD/function/hook_node_info.
 * 
 * @todo Write a better long description
 * 
 * @return array $node_types
 */
function _curtapedia_profile_node_types_define() {
  $node_types = array(
    // Create 'Basic page' node type
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st('Use a <em>Basic page</em> for static content, content that rarely changes.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  /**
   * Default publishing options for "Basic page".
   * 
   * Defaults are: Publish; Do not promote; Do not make sticky; Create new revision.
   */
  variable_set('node_options_page', array('status', 'revision'));
  
  // Disable comments on 'Basic page'
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);
  
  // Return node types array
  return $node_types;
  
}

/**
 * @param array $node_types
 * 
 * @return void
 */
function _curtapedia_profile_node_types_save(array $node_types) {
  foreach($node_types as $node_type) {
    $node_type = node_type_set_defaults($node_type);
    node_type_save($node_type);
    node_add_body_field($node_type);
  }
}

/**
 * Define default RDF mappings
 * 
 * @todo Write a better long description
 * 
 * @return array $node_types
 */
function _curtapedia_profile_node_types_rdf_mapping_define() {
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document', 'schema:WebPage'),
        'title' => array(
            'predicates' => array('dc:title', 'schema:mainContentOfPage'),
        ),
        'body' => array(
            'predicates' => array('schema:mainContentOfPage'),
        ),
      ),
    ),
  );
  return $rdf_mappings;
}

/**
 * @param array $node_types
 * 
 * @return void
 */
function _curtapedia_profile_node_types_rdf_mapping_save(array &$rdf_mappings) {
  foreach($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
}